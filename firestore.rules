
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow logged-in users to read and write their own user data
    match /users/{userId} {
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.uid;
      // Allow creation only if the UID in the document matches the creator's UID
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      // Allow updates only by the owner
      allow update: if request.auth != null && request.auth.uid == resource.data.uid;
    }

    // Usernames collection for unique username checks
    match /usernames/{username} {
      // Anyone can check if a username exists
      allow get: if true;
      // Only the authenticated user can create their own username entry
      // The UID in the document must match the creator's UID
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      // Only the user who owns the username can delete it
      allow delete: if request.auth != null && request.auth.uid == resource.data.uid;
      // Prevent updating a username document
      allow update: if false;
    }

    // Reports Collection Rules
    match /reports/{reportId} {
      // Allow anyone to read a report IF it is public and has a public slug
      allow get: if resource.data.isPublic == true && resource.data.publicSlug != null;

      // Allow a logged-in user to read their own reports
      allow list: if request.auth != null && request.auth.uid == request.query.where.uid;
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;

      // Allow creation for any logged-in user, as long as they set themselves as owner
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      
      // Allow updates (like making public or changing slug) only by the owner
      allow update: if request.auth != null && request.auth.uid == resource.data.uid;

      // Allow deletion only by the owner
      allow delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }
  }
}

  